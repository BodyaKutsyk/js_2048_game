{"version":3,"sources":["scripts/main.js"],"names":["Data","DOM_CELLS","HTML_CELLS","HTML_MATRIX","madeMove","isGameStarted","winStatus","score","min","max","Math","floor","random","array","OUTPUT_ARRAY","counter","i","push","j","row","length","column","matrix","matrixCopy","map","elem","FREE_FIELD_CELLS","tempRow","INDEX_OF_RANDOM_ROW","RANDOM_ROW","randomNumber","RANDOM_CELL","CELL_VALUE","selectedRow","selectedColumn","data","repeat","moveCount","moveList","columnCopy","after","before","isObjectEmpty","forEach","limith","field","direction","reversedField","rotateMatrix","moveData","moveLeft","mergeLeft","moveRight","mergeRight","reverseRotate","prevField","FIELD","htmlField","prevFieldCopy","canMove","firstChild","removeChild","lastChild","HTML_CELL","document","createElement","innerText","classList","style","zIndex","animateMovement","appendChild","setTimeout","HTML_EL","hasEmptySpace","COORDS","randomCell","MOVE_SCORE","SELL_SIZE","TOTAL_PATH","moveDirection","movement","querySelectorAll","Game","eventListener","keyEvent","PREV_FIELD","moveField","key","visualize","querySelector","canMoveHorizontaly","canMoveVerticaly","display","removeEventListener","opacity","remove","makeMatrix","body","addEventListener","add","secEl","cell","innerHTML"],"mappings":"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","file":"main.2f588d7d.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Data {\n  constructor(DOM_CELLS) {\n    this.HTML_CELLS = DOM_CELLS;\n    this.HTML_MATRIX = [];\n    this.madeMove = false;\n    this.isGameStarted = false;\n    this.winStatus = false;\n    this.score = 0;\n  }\n\n  randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  makeMatrix(array) {\n    const OUTPUT_ARRAY = [];\n    let counter = 0;\n\n    if (!array) {\n      for (let i = 0; i < 4; i++) {\n        OUTPUT_ARRAY.push([]);\n\n        for (let j = 0; j < 4; j++) {\n          OUTPUT_ARRAY[i].push(0);\n        }\n      }\n    }\n\n    if (array) {\n      for (let row = 0; row < array.length / 4; row++) {\n        OUTPUT_ARRAY.push([]);\n\n        for (let column = 0; column < array.length / 4; column++) {\n          OUTPUT_ARRAY[row].push(array[counter]);\n          counter++;\n        }\n      }\n    }\n\n    return OUTPUT_ARRAY;\n  }\n\n  rotateMatrix(matrix) {\n    const matrixCopy = matrix.map(elem => [...elem]);\n\n    for (let row = 0; row < matrix.length; row++) {\n      for (let column = 0; column < matrix[row].length; column++) {\n        matrixCopy[row][column] = matrix[matrix.length - 1 - column][row];\n      }\n    }\n\n    return matrixCopy;\n  }\n\n  reverseRotate(matrix) {\n    const matrixCopy = matrix.map(elem => [...elem]);\n\n    for (let row = 0; row < matrix.length; row++) {\n      for (let column = 0; column < matrix[row].length; column++) {\n        matrixCopy[row][column] = matrix[column][matrix[row].length - 1 - row];\n      }\n    }\n\n    return matrixCopy;\n  }\n\n  randomCell(matrix) {\n    const FREE_FIELD_CELLS = [];\n\n    for (let row = 0; row < matrix.length; row++) {\n      const tempRow = [row];\n\n      for (let column = 0; column < matrix[row].length; column++) {\n        if (matrix[row][column] === 0) {\n          tempRow.push(column);\n        }\n      }\n\n      if (tempRow.length > 1) {\n        FREE_FIELD_CELLS.push(tempRow);\n      }\n    }\n\n    const INDEX_OF_RANDOM_ROW = this.randomNumber(0, FREE_FIELD_CELLS.length);\n    const RANDOM_ROW = FREE_FIELD_CELLS[INDEX_OF_RANDOM_ROW];\n\n    if (RANDOM_ROW) {\n      const RANDOM_CELL = this.randomNumber(1, RANDOM_ROW.length);\n\n      const CELL_VALUE = Math.random() < 0.9 ? 2 : 4;\n\n      const selectedRow = RANDOM_ROW[0];\n      const selectedColumn = RANDOM_ROW[RANDOM_CELL];\n\n      matrix[selectedRow][selectedColumn] = CELL_VALUE;\n\n      return [selectedRow, selectedColumn];\n    }\n  }\n\n  canMoveVerticaly(matrix) {\n    for (let i = 0; i < matrix.length; i++) {\n      for (let j = 0; j < matrix[i].length - 1; j++) {\n        if (matrix[i][j] === matrix[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  canMoveHorizontaly(matrix) {\n    for (let i = 0; i < matrix.length - 1; i++) {\n      for (let j = 0; j < matrix[i].length; j++) {\n        if (matrix[i][j] === matrix[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hasEmptySpace(matrix) {\n    for (let i = 0; i < matrix.length; i++) {\n      for (let j = 0; j < matrix[i].length; j++) {\n        if (matrix[i][j] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveLeft(matrix, row, data, repeat) {\n    const moveCount = this.moveList;\n    const tempRow = matrix[row];\n\n    for (let column = 0; column < tempRow.length; column++) {\n      if (tempRow[column] !== 0) {\n        let columnCopy = column;\n\n        for (let i = column - 1; i >= 0; i--) {\n          if (tempRow[i] === 0) {\n            if (!repeat) {\n              tempRow[i] = tempRow[columnCopy];\n              moveCount[row][column]++;\n\n              tempRow[columnCopy] = 0;\n\n              if (!data[column].after) {\n                data[column].after = column;\n                data[column].before = column;\n              }\n\n              data[column].after--;\n              data[column].before = column;\n              columnCopy--;\n            }\n\n            if (repeat) {\n              let isObjectEmpty = true;\n\n              tempRow[i] = tempRow[columnCopy];\n              tempRow[columnCopy] = 0;\n\n              data.forEach(elem => {\n                if (elem.after === columnCopy) {\n                  moveCount[row][elem.before]++;\n                  isObjectEmpty = false;\n                }\n              });\n\n              if (isObjectEmpty) {\n                for (let limith = column; limith < tempRow.length; limith++) {\n                  if (tempRow[limith] === 0) {\n                    moveCount[row][limith]++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return tempRow;\n  }\n\n  moveRight(matrix, row, data, repeat) {\n    const moveCount = this.moveList;\n    const tempRow = matrix[row];\n\n    for (let column = tempRow.length - 1; column >= 0; column--) {\n      if (tempRow[column] !== 0) {\n        let columnCopy = column;\n\n        for (let i = column + 1; i < tempRow.length; i++) {\n          if (tempRow[i] === 0) {\n            if (!repeat) {\n              tempRow[i] = tempRow[columnCopy];\n              moveCount[row][column]++;\n              tempRow[columnCopy] = 0;\n\n              if (!data[column].after) {\n                data[column].after = column;\n              }\n\n              data[column].after++;\n              data[column].before = column;\n              columnCopy++;\n            }\n\n            if (repeat) {\n              let isObjectEmpty = true;\n\n              tempRow[i] = tempRow[columnCopy];\n              tempRow[columnCopy] = 0;\n\n              data.forEach(elem => {\n                if (elem.after === columnCopy) {\n                  moveCount[row][elem.before]++;\n                  isObjectEmpty = false;\n                }\n              });\n\n              if (isObjectEmpty) {\n                for (let limith = column; limith >= 0; limith--) {\n                  if (tempRow[limith] === 0) {\n                    moveCount[row][limith]++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return tempRow;\n  }\n\n  mergeLeft(tempRow, data, moveCount) {\n    for (let i = 0; i < tempRow.length; i++) {\n      if (tempRow[i] === tempRow[i + 1] && tempRow[i] !== 0) {\n        tempRow[i] += tempRow[i + 1];\n        this.score += tempRow[i];\n\n        let isObjectEmpty = true;\n\n        data.forEach((elem) => {\n          if (elem.after === i + 1) {\n            moveCount[elem.before]++;\n            isObjectEmpty = false;\n          }\n        });\n\n        if (isObjectEmpty) {\n          moveCount[i + 1]++;\n        }\n\n        tempRow[i + 1] = 0;\n        i++;\n      }\n    }\n  }\n\n  mergeRight(tempRow, data, moveCount) {\n    for (let i = tempRow.length - 1; i >= 0; i--) {\n      if (tempRow[i] === tempRow[i - 1] && tempRow[i] !== 0) {\n        tempRow[i] += tempRow[i - 1];\n        this.score += tempRow[i];\n\n        let isObjectEmpty = true;\n\n        data.forEach((elem) => {\n          if (elem.after === i - 1) {\n            moveCount[elem.before]++;\n            isObjectEmpty = false;\n          }\n        });\n\n        if (isObjectEmpty) {\n          moveCount[i - 1]++;\n        }\n\n        tempRow[i - 1] = 0;\n        i--;\n      }\n    }\n  }\n\n  moveField(field, direction, moveCount) {\n    const reversedField = this.rotateMatrix(field);\n\n    for (let i = 0; i < field.length; i++) {\n      let tempRow = field[i];\n      const moveData = [{}, {}, {}, {}];\n      let repeat = 0;\n\n      switch (direction) {\n        case 'ArrowLeft':\n          tempRow = this.moveLeft(field, i, moveData, repeat);\n          repeat = 1;\n          this.mergeLeft(tempRow, moveData, moveCount[i]);\n          field[i] = tempRow;\n          field[i] = this.moveLeft(field, i, moveData, repeat);\n          break;\n\n        case 'ArrowRight':\n          tempRow = this.moveRight(field, i, moveData, repeat);\n          repeat = 1;\n          this.mergeRight(tempRow, moveData, moveCount[i]);\n          field[i] = tempRow;\n          field[i] = this.moveRight(field, i, moveData, repeat);\n          break;\n\n        case 'ArrowUp':\n          tempRow = this.moveRight(reversedField, i, moveData, repeat);\n          repeat = 1;\n          this.mergeRight(tempRow, moveData, moveCount[i]);\n          field[i] = tempRow;\n\n          field[i] = this.moveRight(\n            reversedField, i, moveCount, moveData, repeat\n          );\n          break;\n\n        case 'ArrowDown':\n          tempRow = this.moveLeft(reversedField, i, moveData, repeat);\n          repeat = 1;\n          this.mergeLeft(tempRow, moveData, moveCount[i]);\n          field[i] = tempRow;\n          field[i] = this.moveLeft(reversedField, i, moveData, repeat);\n          break;\n      }\n    }\n\n    if (direction === 'ArrowUp' || direction === 'ArrowDown') {\n      field.forEach((elem, i) => {\n        field[i] = this.reverseRotate(reversedField)[i];\n      });\n\n      this.moveList = this.reverseRotate(moveCount);\n    }\n  }\n\n  visualize(direction, prevField) {\n    const field = this.FIELD;\n    const htmlField = this.HTML_MATRIX;\n    const moveCount = this.moveList;\n    let prevFieldCopy = prevField;\n\n    if (!prevField) {\n      prevFieldCopy = field;\n    }\n\n    let counter = 0;\n    let canMove = true;\n\n    for (let i = 0; i < prevFieldCopy.length; i++) {\n      for (let j = 0; j < prevFieldCopy[i].length; j++) {\n        if (prevFieldCopy[i][j] === field[i][j]) {\n          counter++;\n        }\n      }\n    }\n\n    if (counter === field.length * field.length) {\n      canMove = false;\n    }\n\n    for (let row = 0; row < prevFieldCopy.length; row++) {\n      for (let column = 0; column < prevFieldCopy[row].length; column++) {\n        while (htmlField[row][column].firstChild) {\n          htmlField[row][column].removeChild(htmlField[row][column].lastChild);\n        }\n\n        const HTML_CELL = document.createElement('div');\n\n        HTML_CELL.innerText = '';\n        HTML_CELL.classList = '';\n\n        if (prevFieldCopy[row][column] > 0) {\n          HTML_CELL.style.zIndex = '2';\n          HTML_CELL.innerText = `${prevFieldCopy[row][column]}`;\n\n          this.animateMovement(HTML_CELL, direction, moveCount[row][column]);\n\n          HTML_CELL.classList = `\n          field-cell\n          field-cell--inner-block\n          field-cell--${prevFieldCopy[row][column]}`;\n          htmlField[row][column].appendChild(HTML_CELL);\n        }\n      }\n    }\n\n    setTimeout(() => {\n      for (let row = 0; row < field.length; row++) {\n        for (let column = 0; column < field[row].length; column++) {\n          const HTML_EL = htmlField[row][column];\n\n          while (HTML_EL.firstChild) {\n            HTML_EL.removeChild(HTML_EL.lastChild);\n          }\n\n          const HTML_CELL = document.createElement('div');\n\n          HTML_CELL.innerText = '';\n          HTML_CELL.classList = '';\n\n          if (field[row][column] > 0) {\n            HTML_CELL.style.zIndex = '2';\n            HTML_CELL.innerText = `${field[row][column]}`;\n\n            HTML_CELL.classList = `\n            field-cell\n            field-cell--inner-block\n            field-cell--${field[row][column]}`;\n            htmlField[row][column].appendChild(HTML_CELL);\n          }\n          moveCount[row][column] = 0;\n        }\n      }\n\n      if (this.hasEmptySpace(field) && canMove && this.madeMove) {\n        const HTML_CELL = document.createElement('div');\n\n        setTimeout(() => {\n          const COORDS = this.randomCell(field);\n\n          HTML_CELL.innerText = `${field[COORDS[0]][COORDS[1]]}`;\n\n          HTML_CELL.classList = `\n          field-cell\n          field-cell--inner-block\n          only-created\n          field-cell--${field[COORDS[0]][COORDS[1]]}`;\n          htmlField[COORDS[0]][COORDS[1]].appendChild(HTML_CELL);\n        }, 100);\n      }\n    }, 50);\n  }\n\n  animateMovement(HTML_CELL, direction, MOVE_SCORE) {\n    const SELL_SIZE = 85;\n    const TOTAL_PATH = SELL_SIZE * MOVE_SCORE;\n    let moveDirection = '';\n    let movement = 0;\n\n    switch (direction) {\n      case 'ArrowUp':\n        moveDirection = 'top';\n        break;\n      case 'ArrowDown':\n        moveDirection = 'bottom';\n        break;\n      case 'ArrowLeft':\n        moveDirection = 'left';\n        break;\n      case 'ArrowRight':\n        moveDirection = 'right';\n        break;\n    }\n\n    HTML_CELL.style[moveDirection] = 0 + 'px';\n    HTML_CELL.style.zIndex = '1';\n\n    setTimeout(() => {\n      movement += TOTAL_PATH / MOVE_SCORE;\n\n      if (movement >= TOTAL_PATH) {\n        movement = TOTAL_PATH;\n      }\n\n      HTML_CELL.style[moveDirection] = -TOTAL_PATH + 'px';\n    }, 10);\n  }\n\n  checkWinState() {\n    const FIELD = this.FIELD;\n\n    FIELD.forEach(row => {\n      row.forEach(column => {\n        if (column === 2048) {\n          this.winStatus = true;\n        }\n      });\n    });\n\n    return this.winStatus;\n  }\n}\n\nconst HTML_CELLS = document.querySelectorAll('.field-cell');\n\nconst Game = new Data(HTML_CELLS);\n\nGame.FIELD = Game.makeMatrix();\nGame.moveList = Game.makeMatrix();\nGame.HTML_MATRIX = Game.makeMatrix(HTML_CELLS);\n\nfunction eventListener(keyEvent) {\n  const PREV_FIELD = Game.FIELD.map(elem => [...elem]);\n\n  Game.madeMove = true;\n\n  Game.moveField(Game.FIELD, keyEvent.key, Game.moveList);\n  Game.visualize(keyEvent.key, PREV_FIELD);\n\n  for (let i = 0; i < Game.moveList.length; i++) {\n    for (let j = 0; j < Game.moveList.length; j++) {\n      Game.moveList[i][j] = 0;\n    }\n  }\n\n  document.querySelector('.game-score').innerText = `${Game.score}`;\n\n  if (!Game.canMoveHorizontaly(Game.FIELD)\n  && !Game.canMoveVerticaly(Game.FIELD)\n  && !Game.hasEmptySpace(Game.FIELD)) {\n    document.querySelector('.game-field__game-over').style.display = 'flex';\n    document.removeEventListener('keydown', eventListener);\n\n    setTimeout(() => {\n      document.querySelector('.game-field__game-over').style.opacity = '1';\n      document.querySelector('.message-lose').classList.remove('hidden');\n    }, 10);\n  } else if (Game.winStatus) {\n    document.querySelector('.game-field__game-win').style.display = 'flex';\n    document.removeEventListener('keydown', eventListener);\n\n    setTimeout(() => {\n      document.querySelector('.game-field__game-win').style.opacity = '1';\n      document.querySelector('.message-win').classList.remove('hidden');\n    }, 10);\n  }\n};\n\ndocument.body.querySelector('.button').addEventListener('click', () => {\n  document.querySelector('.message-start').classList.add('hidden');\n\n  if (Game.isGameStarted) {\n    Game.FIELD.forEach((elem, row) => {\n      elem.forEach((secEl, column) => {\n        Game.FIELD[row][column] = 0;\n      });\n    });\n\n    HTML_CELLS.forEach(cell => {\n      cell.innerHTML = '';\n\n      while (cell.firstChild) {\n        cell.removeChild(cell.firstChild);\n      }\n    });\n\n    document.body.querySelector('button').classList = 'button start';\n    document.body.querySelector('button').innerHTML = 'Start';\n    document.body.querySelector('.game-score').innerHTML = '0';\n\n    document.body.querySelector('.game-field__game-over')\n      .style.display = 'none';\n\n    document.body.querySelector('.game-field__game-win')\n      .style.display = 'none';\n\n    document.body.querySelector('.message-lose').classList.add('hidden');\n    document.body.querySelector('.message-win').classList.add('hidden');\n    document.body.querySelector('.message-start').classList.remove('hidden');\n    Game.madeMove = false;\n    Game.score = 0;\n  }\n\n  if (!Game.madeMove) {\n    setTimeout(() => {\n      Game.randomCell(Game.FIELD);\n      Game.randomCell(Game.FIELD);\n      Game.visualize(Game.FIELD, Game.HTML_MATRIX, Game.moveList);\n    }, 50);\n\n    document.querySelector('.button').classList = 'button restart';\n    document.querySelector('.button').innerText = 'Restart';\n    Game.isGameStarted = true;\n  }\n\n  document.addEventListener('keydown', eventListener);\n});\n"]}